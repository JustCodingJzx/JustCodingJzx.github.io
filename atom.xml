<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://JustCodingJzx.github.io</id>
    <title>JustCoding</title>
    <updated>2020-07-24T09:05:51.515Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://JustCodingJzx.github.io"/>
    <link rel="self" href="https://JustCodingJzx.github.io/atom.xml"/>
    <subtitle>记录深度学习点点滴滴 😇</subtitle>
    <logo>https://JustCodingJzx.github.io/images/avatar.png</logo>
    <icon>https://JustCodingJzx.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, JustCoding</rights>
    <entry>
        <title type="html"><![CDATA[内存分配]]></title>
        <id>https://JustCodingJzx.github.io/post/nei-cun-fen-pei/</id>
        <link href="https://JustCodingJzx.github.io/post/nei-cun-fen-pei/">
        </link>
        <updated>2020-07-24T09:04:06.000Z</updated>
        <summary type="html"><![CDATA[<p>​  c语言中声明在&lt;stdlib.h&gt;中的三个内存分配函数：（返回值都是void *）</p>
<ul>
<li>malloc：分配内存块，但是不对内存块进行初始化</li>
<li>calloc：分配内存块，并且对内存块进行清除</li>
<li>Realloc：调整之前的内存块</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<p>​  c语言中声明在&lt;stdlib.h&gt;中的三个内存分配函数：（返回值都是void *）</p>
<ul>
<li>malloc：分配内存块，但是不对内存块进行初始化</li>
<li>calloc：分配内存块，并且对内存块进行清除</li>
<li>Realloc：调整之前的内存块</li>
</ul>
<!-- more -->
<h3 id="malloc">malloc</h3>
<p>​	函数原型：void *malloc(size_t size)</p>
<ol>
<li>为字符串分配内存：</li>
</ol>
<p><code>char *p=malloc(n+1)</code></p>
<p>​	给n个字符分配空间，不要忘记还有一个空字符作为结尾。</p>
<ol start="2">
<li>
<p>为数组动态分配内存</p>
<p><code>int *a=malloc(n*sizeof(int))</code></p>
</li>
</ol>
<h3 id="calloc">calloc</h3>
<p>函数原型：void *calloc(size_t nmemb, size_t size)</p>
<p>​	该函数为nmemb个元素的数组分配空间，其中每个元素的长度是size个字节。之后对所有位设置为0进行初始化。如：</p>
<p><code>int *a = calloc(n, sizeof(int))</code></p>
<p>​	因为calloc会清除分配的内存，所以可使用calloc函数为非空数组分配空间。通过调用以1作为第一个实际参数的calloc函数，可以为任意类型的数据项分配空间：</p>
<p><code>struct point *p;p=calloc(1, sizeof(struct point));</code></p>
<p>​	执行此语句后，p将指向结构，且结构中的成员会被置0.</p>
<h3 id="realloc">realloc</h3>
<p>函数原型：void *realloc(void *ptr, size_t size)</p>
<p>​	ptr必须指向内存块，一定是通过malloc或者calloc或者realloc函数的调用取得的。size表示新的内存块,可以大于或者小于原来的size。</p>
<p><strong>准则</strong>：</p>
<ul>
<li>当扩展内存时，realloc不会对添加进的字节进行初始化；</li>
<li>如果realloc不能按要求扩大内存块，那么它会返回空指针，并且原有的内存块的数据不会发生改变；</li>
<li>如果realloc第一个参数是空指针，那它的作用等同于malloc函数；</li>
<li>如果realloc调用是第二个参数是0， 那个它会释放掉内存块。</li>
</ul>
<h3 id="悬空指针">悬空指针</h3>
<p>以上三个内存分配函数用完后需要使用free函数进行释放。调用free(p)函数会释放p指向的内存块，但是不会改变p本身。如果忘记了p不再指向有效内存块，可能发生错误。</p>
<pre><code>char *p=malloc(4);
free(p);
strcpy(p, &quot;abc&quot;);
</code></pre>
<p>​	修改p指向的内存是严重的错误，因为程序对此内存不再有任何的控制权了。</p>
<h3 id="指向函数的指针">指向函数的指针</h3>
<p>定义：void (*function)(int);</p>
<p>​	function可指向任何带有Int型实参的函数，而且此函数返回void值。如果f是这样一个函数，那么可以用下列方式把function指向f:</p>
<p>​	function=f;</p>
<p>调用时如下：</p>
<p>​	（*function）(i); 或者 function(f);</p>
<p><strong>应用</strong>：</p>
<p>stdlib.h的函数qsort:</p>
<p><code>void qsort(void *base, size_t nmemb, size_t size, int(*compar)(const void *, const void *));</code></p>
<p>​	其中base指向数组待进行排序的第一个元素，nmemb是待排序元素的数量，size是每个元素占用字节的大小。compar是指向比较函数的指针。 举例：</p>
<pre><code>int compare(const void *p, const void *q){
	if (((struct part *)p)-&gt;number &lt; ((struct part *)q)-&gt;number)
		return -1;
	else if (((struct part *)p)-&gt;number == ((struct part *)q)-&gt;number)
		return 0;
	else
		return 1;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[结构/联合/枚举]]></title>
        <id>https://JustCodingJzx.github.io/post/jie-gou-lian-he-mei-ju/</id>
        <link href="https://JustCodingJzx.github.io/post/jie-gou-lian-he-mei-ju/">
        </link>
        <updated>2020-07-24T08:28:11.000Z</updated>
        <summary type="html"><![CDATA[<p>本文记录下<strong>结构体</strong>、<strong>联合</strong>和<strong>枚举</strong>.</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文记录下<strong>结构体</strong>、<strong>联合</strong>和<strong>枚举</strong>.</p>
<!-- more -->
<h2 id="结构体">结构体</h2>
<h3 id="1-结构体类型">1 结构体类型</h3>
<p>​	结构类型的标记有两种方法：</p>
<pre><code class="language-c">struct part{
  int number;
  char name[5];
};
</code></pre>
<p>​	这种标记下，声明变量如下：</p>
<p><code>struct part part1={100, 'Bob'}; //struct字段不可以省略</code></p>
<p>​	另外使用typedef来声明结构标记：</p>
<pre><code>struct part{
	int number;
	char name[5];
};
typedef struct part Part;
</code></pre>
<p>​	可以简洁的写成如下形式：</p>
<pre><code class="language-c">typedef struct{
  int number;
  char name[5];
}Part;
</code></pre>
<p>​	声明变量如下：</p>
<p><code>Part part1={100, 'Bob'};</code></p>
<h3 id="2-初始化">2 初始化</h3>
<ul>
<li><code>Part part1={100,'Bob'}</code>;</li>
<li><code>Part part2 = part1;</code></li>
<li><code>Part part2 = (struct part){100,'Bob'};// C99特性，复合字面量，见下文解释</code></li>
</ul>
<h3 id="3-参数传递">3 参数传递</h3>
<p>​	定义如下的函数：</p>
<pre><code>void print_part(struct part p){...}
</code></pre>
<p>​	其中形参为结构体。在<strong>C99</strong>中，可以使用符合字面量作为实参传入。复合字面量用于创建没有名字的结构，生成的结构可以向参数一样传递，可以被函数返回，也可以赋值给变量。</p>
<p>​	一般，复合字面量包括圆括号里的类型名和后续花括号的一组值。如果复合字面量代表一个结构，类型名可以是结构标记的前面加上struct或者typedef。一个复合字面量可以包括指示符号，就像指定初始化一样：</p>
<pre><code>print_part((struct part){.number=100, .name=&quot;Bob&quot;});
or
print_part((struct part){100, &quot;Bob&quot;});
</code></pre>
<h2 id="联合">联合</h2>
<p>​	联合和结构的使用方法基本一致，不同的是两者的内存分配方式。现在生命一个联合变量u, 且有两个成员：</p>
<pre><code>struct num{
	int i;
	double d;
};
struct num s;
</code></pre>
<p>​	类似的联合的声明：</p>
<pre><code>union num{
	int i;
	double d;
};
union num u;
</code></pre>
<p>​	如下图所示，s的成员存储在不同的内存地址中，u的存储在同一个内存地址中。在结构变量s中，成员i和d 占用不同的内存单元。s总共占用了12个字节。而在联合变量u中，成员i和d互相迭代，所以u只占用了8个字节。i和d具有相同的地址。<br>
<img src="https://JustCodingJzx.github.io/post-images/1595580809085.png" alt="" loading="lazy"></p>
<p>​	由于编译器把联合的成员重叠存储，所以改变其中一个成员会使得存储在任何其他成员中的值发生改变。</p>
<h2 id="枚举">枚举</h2>
<p>​	枚举类型是一种值由程序员列出的类型，而且程序员必须为每个值命名（枚举常量）。下例示例枚举的值()（CLUBS、DIAMONDS、HEARTS、SPADES）(表示扑克牌的不同花色)可以赋值给s1,s2:</p>
<p><code>enum {CLUBS、DIAMONDS、HEARTS、SPADES}s1,s2</code></p>
<p>​	枚举，结构和联合声明和使用方法都很类似，但是，与结构和联合的成员不同，枚举常量的名字必须不同于作用域范围内声明的其他标识符。</p>
<p>​	在系统内部，C语言会把枚举变量和常量作为常数来处理。默认情况下，编译器会把整数0,1,2,...赋值给枚举常量。当然我们可以为常量自由选择不同的值，可以在声明时指定：</p>
<p><code>enum suits{CLUBS=1, DIAMONDS=2,HEARTS=3, SPADES=4}</code></p>
<h3 id="使用枚举来确定联合中的成员">使用枚举来确定联合中的成员</h3>
<p>​	在结构体中：</p>
<pre><code>typedef struct{
	enum {INT_KIND, DOUBLE_KIND} kind;
	union{
		int i;
		double d;
	}u;
	
} Number;
</code></pre>
<p>​	在具体使用的时候：</p>
<pre><code>void print_number(Number n){
	if(n.kind = INT_KIND)
		printf(&quot;%d&quot;, n.u.i);
	else
		printf(&quot;%g&quot;, n.u.d);
}
</code></pre>
<p>​	 <code>Part part1={100, 'Bob'};//struct字段不可以省略</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello]]></title>
        <id>https://JustCodingJzx.github.io/post/hello-gridea/</id>
        <link href="https://JustCodingJzx.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎阅读本博客 <strong>JustCoding</strong> ！<br>
✍️  <strong>JustCoding</strong> 是一个记录了本人学习##Deep learning##过程中的点点滴滴，可能会更侧重于计算机视觉方面的理解。</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎阅读本博客 <strong>JustCoding</strong> ！<br>
✍️  <strong>JustCoding</strong> 是一个记录了本人学习##Deep learning##过程中的点点滴滴，可能会更侧重于计算机视觉方面的理解。</p>
<!-- more -->
<p><a href="https://github.com/JustCodingJzx">Github</a><br>
<a href="https://space.bilibili.com/57540015">B站 主页</a><br>
<a href="http://fehey.com/">zhihu</a></p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>